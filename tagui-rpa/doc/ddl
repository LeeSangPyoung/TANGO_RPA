-- ✅ Step 1: 기존 데이터베이스 및 객체 삭제
DROP DATABASE IF EXISTS rpa_db;


DROP SEQUENCE IF EXISTS seq_rpa_action, seq_rpa_step, seq_rpa_step_param, seq_rpa_site, seq_rpa_account;
DROP TABLE IF EXISTS rpa_execution_log, rpa_step_account, rpa_step_param, rpa_step, rpa_action, rpa_account, rpa_site;
DROP FUNCTION IF EXISTS generate_action_id, generate_step_id, generate_step_param_id, generate_site_id, generate_account_id;

-- ✅ Step 2: 데이터베이스 생성
CREATE DATABASE rpa_db;
\c rpa_db;

-- ✅ Step 3: 테이블 생성

-- 1. 사이트 정보 테이블
CREATE TABLE rpa_site (
    id              VARCHAR(10) PRIMARY KEY,
    site_name       VARCHAR(100) NOT NULL,
    site_url        VARCHAR(255) NOT NULL,
    created_at      TIMESTAMP DEFAULT CURRENT_TIMESTAMP
);

-- 2. 계정 정보 테이블
CREATE TABLE rpa_account (
    id              VARCHAR(10) PRIMARY KEY,
    site_id         VARCHAR(10) NOT NULL,
    account_name    VARCHAR(100) NOT NULL,
    username        VARCHAR(100) NOT NULL,
    password        VARCHAR(100) NOT NULL,
    created_at      TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    FOREIGN KEY (site_id) REFERENCES rpa_site(id) ON DELETE CASCADE
);

-- 3. RPA 프로세스 테이블
CREATE TABLE rpa_action (
    id              VARCHAR(10) PRIMARY KEY,
    action_name     VARCHAR(100) NOT NULL,
    created_at      TIMESTAMP DEFAULT CURRENT_TIMESTAMP
);

-- 4. RPA 실행 단계 테이블
CREATE TABLE rpa_step (
    id              VARCHAR(10) PRIMARY KEY,
    action_id       VARCHAR(10) NOT NULL,
    site_id         VARCHAR(10) NOT NULL,
    step_type       VARCHAR(50) NOT NULL,
    script_content  TEXT NOT NULL,
    execute_order   INT NOT NULL,
    created_at      TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    FOREIGN KEY (action_id) REFERENCES rpa_action(id) ON DELETE CASCADE,
    FOREIGN KEY (site_id) REFERENCES rpa_site(id) ON DELETE CASCADE
);

-- 5. RPA Step 파라미터 테이블
CREATE TABLE rpa_step_param (
    id              VARCHAR(10) PRIMARY KEY,
    step_id         VARCHAR(10) NOT NULL,
    param_key       VARCHAR(100) NOT NULL,
    param_value     TEXT NOT NULL,
    created_at      TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    FOREIGN KEY (step_id) REFERENCES rpa_step(id) ON DELETE CASCADE
);

-- 6. RPA 실행 단계별 계정 매핑 테이블
CREATE TABLE rpa_step_account (
    step_id         VARCHAR(10) NOT NULL,
    account_id      VARCHAR(10) NOT NULL,
    PRIMARY KEY (step_id, account_id),
    FOREIGN KEY (step_id) REFERENCES rpa_step(id) ON DELETE CASCADE,
    FOREIGN KEY (account_id) REFERENCES rpa_account(id) ON DELETE CASCADE
);

-- 7. RPA 실행 로그 테이블
CREATE TABLE rpa_execution_log (
    no              BIGSERIAL PRIMARY KEY,
    action_id       VARCHAR(10) NOT NULL,
    step_id         VARCHAR(10) NOT NULL,
    account_id      VARCHAR(10) NOT NULL,
    script_content  TEXT NOT NULL,
    executed_at     TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    FOREIGN KEY (action_id) REFERENCES rpa_action(id) ON DELETE CASCADE,
    FOREIGN KEY (step_id) REFERENCES rpa_step(id) ON DELETE CASCADE,
    FOREIGN KEY (account_id) REFERENCES rpa_account(id) ON DELETE CASCADE
);

-- ✅ Step 4: ID 자동 생성 (PostgreSQL 트리거 + 시퀀스 적용)

-- 액션 ID 자동 생성
CREATE SEQUENCE seq_rpa_action START WITH 1 INCREMENT BY 1;
CREATE FUNCTION generate_action_id() RETURNS TRIGGER AS $$
BEGIN
    NEW.id := 'ACT' || LPAD(NEXTVAL('seq_rpa_action')::TEXT, 6, '0');
    RETURN NEW;
END;
$$ LANGUAGE plpgsql;
CREATE TRIGGER trg_rpa_action BEFORE INSERT ON rpa_action
FOR EACH ROW EXECUTE PROCEDURE generate_action_id();

-- 스텝 ID 자동 생성
CREATE SEQUENCE seq_rpa_step START WITH 1 INCREMENT BY 1;
CREATE FUNCTION generate_step_id() RETURNS TRIGGER AS $$
BEGIN
    NEW.id := 'STP' || LPAD(NEXTVAL('seq_rpa_step')::TEXT, 6, '0');
    RETURN NEW;
END;
$$ LANGUAGE plpgsql;
CREATE TRIGGER trg_rpa_step BEFORE INSERT ON rpa_step
FOR EACH ROW EXECUTE PROCEDURE generate_step_id();

-- 파라미터 ID 자동 생성
CREATE SEQUENCE seq_rpa_step_param START WITH 1 INCREMENT BY 1;
CREATE FUNCTION generate_step_param_id() RETURNS TRIGGER AS $$
BEGIN
    NEW.id := 'PAR' || LPAD(NEXTVAL('seq_rpa_step_param')::TEXT, 6, '0');
    RETURN NEW;
END;
$$ LANGUAGE plpgsql;
CREATE TRIGGER trg_rpa_step_param BEFORE INSERT ON rpa_step_param
FOR EACH ROW EXECUTE PROCEDURE generate_step_param_id();

-- 사이트 ID 자동 생성
CREATE SEQUENCE seq_rpa_site START WITH 1 INCREMENT BY 1;
CREATE FUNCTION generate_site_id() RETURNS TRIGGER AS $$
BEGIN
    NEW.id := 'SIT' || LPAD(NEXTVAL('seq_rpa_site')::TEXT, 6, '0');
    RETURN NEW;
END;
$$ LANGUAGE plpgsql;
CREATE TRIGGER trg_rpa_site BEFORE INSERT ON rpa_site
FOR EACH ROW EXECUTE PROCEDURE generate_site_id();

-- 계정 ID 자동 생성
CREATE SEQUENCE seq_rpa_account START WITH 1 INCREMENT BY 1;
CREATE FUNCTION generate_account_id() RETURNS TRIGGER AS $$
BEGIN
    NEW.id := 'ACC' || LPAD(NEXTVAL('seq_rpa_account')::TEXT, 6, '0');
    RETURN NEW;
END;
$$ LANGUAGE plpgsql;
CREATE TRIGGER trg_rpa_account BEFORE INSERT ON rpa_account
FOR EACH ROW EXECUTE PROCEDURE generate_account_id();





-- DB INSERT


-- 사이트 데이터 삽입
INSERT INTO rpa_site (id, site_name, site_url) VALUES
    ('SIT000001', '네이버', 'https://www.naver.com'),
    ('SIT000002', '구글', 'https://www.google.com');

-- 계정 데이터 삽입
INSERT INTO rpa_account (id, site_id, account_name, username, password) VALUES
    ('ACC000001', 'SIT000001', '네이버 계정 1', 'naver_user', 'naver_pass'),
    ('ACC000002', 'SIT000002', '구글 계정 1', 'google_user', 'google_pass');

-- RPA 액션 데이터 삽입
INSERT INTO rpa_action (id, action_name) VALUES
    ('ACT000001', '네이버 로그인'),
    ('ACT000002', '구글 검색');

-- RPA 스텝 데이터 삽입
INSERT INTO rpa_step (id, action_id, site_id, step_type, script_content, execute_order) VALUES
    ('STP000001', 'ACT000001', 'SIT000001', 'LOGIN', 'type id as {id}\ntype pw as {password}\nclick login', 1),
    ('STP000002', 'ACT000002', 'SIT000002', 'SEARCH', 'type search_box as {query}\nclick search', 1);
   
   
   
   select * from rpa_action where id = 'ACT000001';
  
  select * from rpa_action;

 
 ALTER TABLE rpa_step ADD COLUMN use_yn VARCHAR(1) DEFAULT 'Y';

select * from rpa_account;

ALTER TABLE rpa_step_account ADD COLUMN use_yn VARCHAR(1) DEFAULT 'Y';



